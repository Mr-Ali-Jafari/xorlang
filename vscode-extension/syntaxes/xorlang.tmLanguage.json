{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "XorLang",
    "scopeName": "source.xor",
    "patterns": [
        { "include": "#comments" },
        { "include": "#keywords" },
        { "include": "#strings" },
        { "include": "#numbers" },
        { "include": "#entities" },
        { "include": "#operators" }
    ],
    "repository": {
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.xor",
                    "match": "\\b(if|else|for|while|return|import)\\b"
                },
                {
                    "name": "storage.type.xor",
                    "match": "\\b(var|func|class)\\b"
                },
                {
                    "name": "keyword.operator.new.xor",
                    "match": "\\b(new)\\b"
                },
                {
                    "name": "variable.language.this.xor",
                    "match": "\\b(this)\\b"
                },
                {
                    "name": "constant.language.xor",
                    "match": "\\b(true|false|null)\\b"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.xor",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.xor",
                    "match": "\\\\."
                }
            ]
        },
        "numbers": {
            "name": "constant.numeric.xor",
            "match": "\\b[0-9]+(\\.[0-9]+)?\\b"
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.xor",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.xor",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "entities": {
            "patterns": [
                {
                    "name": "entity.name.function.xor",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()"
                },
                {
                    "name": "entity.name.type.class.xor",
                    "match": "(?<=\\bclass\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.xor",
                    "match": "="
                },
                {
                    "name": "keyword.operator.comparison.xor",
                    "match": "==|!=|<|>|<=|>="
                },
                {
                    "name": "keyword.operator.arithmetic.xor",
                    "match": "\\+|\\-|\\*|/"
                }
            ]
        }
    }
}
